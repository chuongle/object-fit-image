<?php

/**
 * @file
 * Contains object_fit_image.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_help().
 */
function object_fit_image_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the object_fit_image module.
    case 'help.page.object_fit_image':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom Image Formatter that function as background image.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function object_fit_image_theme() {
  return array(
    'object_fit_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'item_attributes' => NULL,
        'url' => NULL,
        'image_style' => NULL,
      ),
    ),
  );
}

/**
 * Borrow implementation from Repsonsive Image
 *
 *
 * Prepares variables for object fit image formatter templates.
 *
 * Default template: object-fit-image-formatter.html.twig.
 * 
 * @param array $variables
 *   An associative array containing:
 *   - item: An ImageItem object.
 *   - item_attributes: An optional associative array of HTML attributes to be
 *     placed in the img tag.
 *   - responsive_image_style_id: A responsive image style.
 *   - url: An optional \Drupal\Core\Url object.
 */
function template_preprocess_object_fit_image_formatter(&$variables) {
  $style = ImageStyle::load($variables['image_style']);

  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );

  $style->transformDimensions($dimensions, $variables['uri']);


  $variables['object_fit_image'] = array(
    '#theme' => 'image',
  );
  $item = $variables['item'];

  $attributes = array();
  // Do not output an empty 'title' attribute.
  if (Unicode::strlen($item->title) != 0) {
    $attributes['title'] = $item->title;
  }
  $attributes['alt'] = $item->alt;
  // Need to check that item_attributes has a value since it can be NULL.
  if ($variables['item_attributes']) {
    $attributes += $variables['item_attributes'];
  }
  $attributes['class'][] = 'object-fit';
  if (($entity = $item->entity) && empty($item->uri)) {
    $variables['object_fit_image']['#uri'] = $entity->getFileUri();
  }
  else {
    $variables['object_fit_image']['#uri'] = $item->uri;
  }
  
  foreach (array('width', 'height') as $key) {
    $variables['object_fit_image']["#$key"] = $item->$key;
  }

  if($style) {
    $variables['object_fit_image']['#uri'] = $style->buildUrl($variables['object_fit_image']['#uri']);
    $variables['object_fit_image']['#width'] = $dimensions['#width'];
    $variables['object_fit_image']['#height'] = $dimensions['#height'];
    $variables['object_fit_image']['#style_name'] = $style;
  }

  $variables['object_fit_image']['#attributes'] = $attributes;
}